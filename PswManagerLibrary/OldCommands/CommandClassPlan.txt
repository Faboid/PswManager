
CommandQuery {
    IReadOnlyDictionary<string, ICommandClass> dic;

    public CommandQuery(/*dependencies*/) {
        Dictionary<string, ICommandClass> temp = new();
        temp.Add(string commandname, instantiated class);
        temp.Add(string commandname, instantiated class);
        temp.Add(string commandname, instantiated class);

        dic = new ReadOnlyDictionary<string, ICommandClass>(temp);
    }

    public (string message, string value) Query(string command) {
        string args = command.Split(' ');
        string cmmType = args.First();
    
        try {
            return dic[cmmType].Run(args.Skip(1).ToArray());
        } catch (InvalidCommandException ex) {
            return (ex.Message, null);
        }
    }

}

CallingConsumer {

    void CallingFunction(CommandQuery query) {
        
        string command = Console.ReadLine();
        var result = query.Query(command);

        Console.WriteLine(result.Message);
        if(result.Value is not null) {
            Console.WriteLine(result.Value);
        }
    }
}

CreateAccountCommand : ICommandClass {

    (string message, string? value) Run(string arguments) {
        var args = arguments.Split(' ');
        //test correct args number

        //try create account

        //return success/failure message, value if present
    }

}